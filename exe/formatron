#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'formatron/version'
require 'formatron/generators/credentials'
require 'formatron/generators/bootstrap'
require 'formatron/configuration'

program :version, Formatron::VERSION
program :description, 'Quickly deploy AWS CloudFormation ' \
                      'stacks backed by a Chef Server'

global_option '-c', '--credentials FILE', 'The credentials file'
global_option(
  '-d',
  '--directory DIRECTORY',
  'The Formatron configuration directory'
)

def dot_credentials
  File.join '.formatron', 'credentials.json'
end

def global_credentials
  File.join Dir.home, dot_credentials
end

def local_credentials(directory)
  File.join directory, dot_credentials
end

def default_credentials(directory)
  local = local_credentials directory
  if File.file?(local)
    local
  elsif File.file?(global_credentials)
    global_credentials
  else
    fail 'No credentials found'
  end
end

def default_generated_credentials(directory)
  if File.file?(File.join(directory, 'Formatronfile'))
    local_credentials(directory)
  else
    global_credentials
  end
end

command :deploy do |c|
  c.syntax = 'formatron deploy [options]'
  c.summary = 'Deploy or update a Formatron stack'
  c.description = 'Deploy or update a Formatron stack'
  c.option '-t', '--target STRING', 'The target configuration (eg. production)'
  c.action do |_args, options|
    directory = options.directory || Dir.pwd
    directory = File.expand_path directory
    credentials = options.credentials || default_credentials(directory)
    credentials = File.expand_path credentials
    configuration = Formatron::Configuration.new(
      credentials,
      directory
    )
    target = options.target || choose(
      'Target?',
      configuration.targets
    )
    ok = !configuration.protected?(target) || agree(
      "Are you sure you wish to deploy protected target: #{target}?"
    )
    configuration.deploy(
      target
    ) if ok
  end
end

command :destroy do |c|
  c.syntax = 'formatron destroy [options]'
  c.summary = 'Destroy a Formatron stack'
  c.description = 'Destroy a Formatron stack'
  c.option '-t', '--target STRING', 'The target configuration (eg. production)'
  c.action do |_args, options|
    directory = options.directory || Dir.pwd
    directory = File.expand_path directory
    credentials = options.credentials || default_credentials(directory)
    credentials = File.expand_path credentials
    configuration = Formatron::Configuration.new(
      credentials,
      directory
    )
    target = options.target || choose(
      'Target?',
      configuration.targets
    )
    ok = !configuration.protected?(target) || agree(
      "Are you sure you wish to destroy protected target: #{target}?"
    )
    configuration.destroy(
      target
    ) if ok
  end
end

command :credentials do |c|
  c.syntax = 'formatron credentials [options]'
  c.summary = 'Generate a credentials JSON file'
  c.description = 'Generate a credentials JSON file'
  c.option '-r', '--region STRING', 'The AWS region'
  c.option '-a', '--access-key-id STRING', 'The AWS access key ID'
  c.option '-s', '--secret-access-key STRING', 'The AWS secret access key'
  c.action do |_args, options|
    directory = options.directory || Dir.pwd
    directory = File.expand_path directory
    credentials = options.credentials || ask('Credentials file? ') do |q|
      q.default = default_generated_credentials directory
    end
    credentials = File.expand_path credentials
    region = options.region || choose(
      'Region:',
      'us-east-1',
      'us-west-2',
      'us-west-1',
      'eu-west-1',
      'eu-central-1',
      'ap-southeast-1',
      'ap-southeast-2',
      'ap-northeast-1',
      'sa-east-1'
    )
    access_key_id = options.access_key_id || ask('Access Key ID? ')
    secret_access_key =
      options.secret_access_key || password('Secret Access Key? ')
    Formatron::Generators::Credentials.generate(
      credentials,
      region,
      access_key_id,
      secret_access_key
    )
  end
end

command :bootstrap do |c|
  c.syntax = 'formatron bootstrap [options]'
  c.summary = 'Generate a bootstrap configuration'
  c.description = 'Generate a bootstrap configuration'
  c.option '-n', '--name STRING', 'The name for the configuration'
  c.option(
    '-h',
    '--hosted-zone-id STRING',
    'The Route53 Hosted Zone ID for the public hosted zone'
  )
  c.action do |_args, options|
    directory = options.directory || ask('Directory? ') do |q|
      q.default = Dir.pwd
    end
    directory = File.expand_path directory
    name = options.name || ask('Name? ') do |q|
      q.default = File.basename directory
    end
    hosted_zone_id = options.hosted_zone_id || ask('Hosted Zone ID? ')
    Formatron::Generators::Bootstrap.generate(
      directory,
      name,
      hosted_zone_id
    )
  end
end

command :instance do |c|
  c.syntax = 'formatron instance [options]'
  c.summary = 'Generate an instance configuration'
  c.description = 'Generate an instance configuration'
  c.option '-n', '--name STRING', 'The name for the configuration'
  c.option(
    '-b',
    '--bootstrap-configuration STRING',
    'The name of the bootstrap configuration to depend on'
  )
  c.action do |_args, options|
    directory = options.directory || ask('Directory? ') do |q|
      q.default = Dir.pwd
    end
    directory = File.expand_path directory
    name = options.name || ask('Name? ') do |q|
      q.default = File.basename directory
    end
    bootstrap_configuration =
      options.bootstrap_configuration || ask('Bootstrap configuration? ')
    Formatron::Generators::Instance.generate(
      directory,
      name,
      bootstrap_configuration
    )
  end
end
