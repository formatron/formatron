<%
    s3Path = "#{bucket}/#{target}/#{name}"
    userKeyPath = "#{s3Path}/user.pem"
    organizationKeyPath = "#{s3Path}/organization.pem"
%>{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "<%= "bootstrap-#{name}-#{target}" %>",

  "Parameters" : {
  },

  "Mappings" : {
  },

  "Resources" : {

    "role" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": { "Service": [ "ec2.amazonaws.com" ] },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/"
      }
    },

    "instanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          { "Ref": "role" }
        ]
      }
    },

    "policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "Roles": [ { "Ref": "role" } ],
        "PolicyName": "chefServerPolicy",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Action"     : ["s3:PutObject"],
            "Effect"     : "Allow",
            "Resource"   : [
              "arn:aws:s3:::<%= userKeyPath %>",
              "arn:aws:s3:::<%= organizationKeyPath %>"
            ]
          }, {
            "Effect": "Allow",
            "Action": [
              "kms:Encrypt",
              "kms:GenerateDataKey*"
            ],
            "Resource": { "Fn::Join": [ "", [ "arn:aws:kms:::key/<%= configuration.kms_key %>" ] ] }
          } ]
        }
      }
    },

    "instance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install Chef Server",

        "AWS::CloudFormation::Init" : {
          "config": {
            "packages": {
              "apt": {
                "ntp": [],
                "cron": [],
                "git": [],
                "libfreetype6": [],
                "libpng3": []
              }
            },
            "files": {
              "/root/.aws/config": {
                "content": { "Fn::Join" : ["", [
                  "[default]\n",
                  "s3 =\n",
                  "    signature_version = s3v4\n",
                  "region = <%= @config['formatronRegion'] %>\n"
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              },
              "/tmp/chef-server-core_12.1.2-1_amd64.deb": {
                "source": "https://web-dl.packagecloud.io/chef/stable/packages/ubuntu/trusty/chef-server-core_12.1.2-1_amd64.deb",
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              },
              "/tmp/chefdk_0.7.0-1_amd64.deb": {
                "source": "https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/12.04/x86_64/chefdk_0.7.0-1_amd64.deb",
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/opscode/chef-server.rb" : {
                "content": { "Fn::Join" : ["", [
                  "bookshelf['enable'] = false\n",
                  "bookshelf['external_url'] = 'https://s3-<%= @config['formatronRegion'] %>.amazonaws.com'\n",
                  "bookshelf['vip'] = 's3-<%= @config['formatronRegion'] %>.amazonaws.com'\n",
                  "bookshelf['access_key_id'] = '", { "Ref": "accessKey" }, "'\n",
                  "bookshelf['secret_access_key'] = '", { "Fn::GetAtt": [ "accessKey", "SecretAccessKey" ] }, "'\n",
                  "opscode_erchef['s3_bucket'] = '<%= @config['chef-server']['cookbooksBucket'] %>'\n",
                  "nginx['ssl_certificate'] = '/etc/nginx/ssl/chef.crt'\n",
                  "nginx['ssl_certificate_key'] = '/etc/nginx/ssl/chef.key'\n"
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/nginx/ssl/chef.crt": {
                 "content": <%= @config['chef-server']['sslCrt'].to_json %>,
                 "mode" : "000644",
                 "owner": "root",
                 "group": "root"
              },
              "/etc/nginx/ssl/chef.key": {
                 "content": <%= @config['chef-server']['sslKey'].to_json %>,
                 "mode" : "000644",
                 "owner": "root",
                 "group": "root"
              },
              "/etc/chef/run-list.json": {
                "content": { "Fn::Join" : ["", [
                  "{\n",
                  "  \"run_list\": [ \"recipe[chef_server_extra::default]\" ]\n",
                  "}\n"
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/chef/client.rb": {
                "content": { "Fn::Join" : ["", [
                  "log_level :info\n",
                  "log_location '/var/log/chef-client.log'\n",
                  "chef_server_url 'https://<%= @config['global']['chef-server']['subDomain'] %>.<%= @config['global']['hostedZoneName'] %>/organizations/<%= @config['chef-server']['organization']['name'] %>'\n",
                  "validation_client_name '<%= @config['chef-server']['organization']['name'] %>-validator'\n",
                  "validation_key '/etc/chef/validation.pem'\n",
                  "client_key '/etc/chef/client.pem'\n",
                  "ssl_verify_mode <%= @config['chef-server']['sslSelfSignedCert'] ? ':verify_none' : ':verify_peer' %>\n"
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              },
              "/root/knife.rb": {
                "content": { "Fn::Join" : ["", [
                  "chef_server_url 'https://<%= @config['global']['chef-server']['subDomain'] %>.<%= @config['global']['hostedZoneName'] %>/organizations/<%= @config['chef-server']['organization']['name'] %>'\n",
                  "node_name '<%= @config['chef-server']['user']['username'] %>'\n",
                  "client_key '/root/<%= @config['chef-server']['user']['username'] %>.pem'\n",
                  "ssl_verify_mode <%= @config['chef-server']['sslSelfSignedCert'] ? ':verify_none' : ':verify_peer' %>\n"
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              },
              "/root/berkshelf.json": {
                "content": { "Fn::Join" : ["", [
                  "{\n",
                  "  \"chef\": {\n",
                  "    \"chef_server_url\": \"https://<%= @config['global']['chef-server']['subDomain'] %>.<%= @config['global']['hostedZoneName'] %>/organizations/<%= @config['chef-server']['organization']['name'] %>\",\n",
                  "    \"node_name\": \"<%= @config['chef-server']['user']['username'] %>\",\n",
                  "    \"client_key\": \"/root/<%= @config['chef-server']['user']['username'] %>.pem\"\n",
                  "  },\n",
                  "  \"ssl\": {\n",
                  "    \"verify\": <%= @config['chef-server']['sslSelfSignedCert'] ? 'false' : 'true' %>\n",
                  "  }\n",
                  "}\n"
                ]]},
                "mode" : "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "services": {
              "sysvinit": {
                "ntp": {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "IamInstanceProfile": { "Ref": "instanceProfile" },
        "AvailabilityZone": "<%= "#{@config['formatronRegion']}#{@config['global']['vpc']['managementSubnet']['availabilityZoneLetter']}" %>",
        "ImageId" : "<%= @config['global']['ubuntuImageId'] %>",
        "InstanceType"   : "t2.medium",
        "KeyName"        : "<%= @config['global']['ec2KeyPair'] %>",
        "NetworkInterfaces": [ {
          "AssociatePublicIpAddress": true,
          "PrivateIpAddress": "<%= @config['global']['chef-server']['privateIp'] %>",
          "DeviceIndex": "0",
          "DeleteOnTermination": true,
          "GroupSet": [
            { "Ref": "securityGroup" }
          ],
          "SubnetId": "<%= @config['vpc']['formatronOutputs']['managementSubnet'] %>"
        } ],
        "SourceDestCheck": false,
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",

          "function error_exit\n",
          "{\n",
          "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "waitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "SHORTNAME=<%= @config['global']['chef-server']['subDomain'] %>\n",
          "PUBLIC_DNS=${SHORTNAME}.<%= @config['global']['hostedZoneName'] %>\n",
          "PRIVATE_IPV4=`(curl http://169.254.169.254/latest/meta-data/local-ipv4)`\n",
          "export HOME=\/root\n",

          "apt-get -y update\n",
          "apt-get -y install python python-setuptools python-pip\n",
          "pip install awscli\n",
          "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
          "export PATH=$PATH:/opt/aws/bin\n",
          "cfn-init --region ", { "Ref" : "AWS::Region" },
          "    -v -s ", { "Ref" : "AWS::StackName" }, " -r instance ",
          " || error_exit 'Failed to run cfn-init'\n",

          "hostname $SHORTNAME\n",
          "echo $PUBLIC_DNS | tee /etc/hostname\n",
          "echo \"$PRIVATE_IPV4 $PUBLIC_DNS $SHORTNAME\" >> /etc/hosts\n",

          "dpkg -i /tmp/chef-server-core_12.1.2-1_amd64.deb\n",
          "chef-server-ctl reconfigure >> /var/log/chef-install.log\n",
          "chef-server-ctl user-create <%= @config['chef-server']['user']['username'] %> <%= @config['chef-server']['user']['firstName'] %> <%= @config['chef-server']['user']['lastName'] %> <%= @config['chef-server']['user']['email'] %> <%= @config['chef-server']['user']['password'] %> --filename $HOME/<%= @config['chef-server']['user']['username'] %>.pem >> /var/log/chef-install.log\n",
          "chef-server-ctl org-create <%= @config['chef-server']['organization']['name'] %> \"<%= @config['chef-server']['organization']['fullName'] %>\" --association_user <%= @config['chef-server']['user']['username'] %> --filename $HOME/<%= @config['chef-server']['organization']['name'] %>-validator.pem >> /var/log/chef-install.log\n",

          "chef-server-ctl install opscode-manage >> /var/log/chef-install.log\n",
          "chef-server-ctl reconfigure >> /var/log/chef-install.log\n",
          "opscode-manage-ctl reconfigure >> /var/log/chef-install.log\n",

          "chef-server-ctl install opscode-push-jobs-server >> /var/log/chef-install.log\n",
          "chef-server-ctl reconfigure >> /var/log/chef-install.log\n",
          "opscode-push-jobs-server-ctl reconfigure >> /var/log/chef-install.log\n",

          "chef-server-ctl install opscode-reporting >> /var/log/chef-install.log\n",
          "chef-server-ctl reconfigure >> /var/log/chef-install.log\n",
          "opscode-reporting-ctl reconfigure >> /var/log/chef-install.log\n",

          "aws s3api put-object --bucket <%= @config['formatronS3Bucket'] %> --key <%= @config['formatronTarget'] %>/<%= @config['formatronName'] %>/<%= @config['chef-server']['user']['keySubPath'] %> --body $HOME/<%= @config['chef-server']['user']['username'] %>.pem --ssekms-key-id <%= @config['formatronKmsKey'] %> --server-side-encryption aws:kms || error_exit 'Failed to upload user key'\n",
          "aws s3api put-object --bucket <%= @config['formatronS3Bucket'] %> --key <%= @config['formatronTarget'] %>/<%= @config['formatronName'] %>/<%= @config['chef-server']['organization']['keySubPath'] %> --body $HOME/<%= @config['chef-server']['organization']['name'] %>-validator.pem --ssekms-key-id <%= @config['formatronKmsKey'] %> --server-side-encryption aws:kms || error_exit 'Failed to upload validator key'\n",

          "# Now install ChefDK, download extra cookbooks and bootstrap self with self\n",
          "dpkg -i /tmp/chefdk_0.7.0-1_amd64.deb || error_exit 'Failed to install ChefDK'\n",
          "mkdir -p $HOME/chef_server_extra && cd $HOME/chef_server_extra\n",
          "aws s3api get-object --bucket <%= @config['formatronS3Bucket'] %> --key <%= @config['formatronOpscodeS3Key'] %>/chef_server_extra.tar.gz chef_server_extra.tar.gz || error_exit 'Failed to download extra cookbooks'\n",
          "tar zxvf chef_server_extra.tar.gz\n",
          "cp $HOME/<%= @config['chef-server']['organization']['name'] %>-validator.pem /etc/chef/validation.pem\n",
          "chef exec knife environment create <%= @config['formatronName'] %>__chef_server_extra -d '<%= @config['formatronName'] %>__chef_server_extra environment created by formatron' -c $HOME/knife.rb || error_exit 'Failed to create environment on server'\n",
          "chef exec knife upload cookbooks --chef-repo-path . -c $HOME/knife.rb || error_exit 'Failed to upload cookbooks'\n",
          "chef exec berks apply <%= @config['formatronName'] %>__chef_server_extra -c $HOME/berkshelf.json -b Berksfile.lock || error_exit 'Failed to apply cookbook versions to environment'\n",
          "chef-client -j /etc/chef/run-list.json --environment <%= @config['formatronName'] %>__chef_server_extra || error_exit 'Failed to converge node'\n",

          "# If all went well, signal success\n",
          "cfn-signal -e $? -r 'Chef Server configuration' '", { "Ref" : "waitHandle" }, "'\n"
        ]]}}
      }
    },

    "waitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "waitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "instance",
      "Properties" : {
        "Handle" : {"Ref" : "waitHandle"},
        "Timeout" : "1800"
      }
    },

    "securityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP/S access via ports 80 and 443",
        "VpcId": "<%= @config['vpc']['formatronOutputs']['vpc'] %>",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "<%= @config['global']['chef-server']['ingress']['httpPort'] %>", "ToPort" : "<%= @config['global']['chef-server']['ingress']['httpPort'] %>", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "<%= @config['global']['chef-server']['ingress']['httpsPort'] %>", "ToPort" : "<%= @config['global']['chef-server']['ingress']['httpsPort'] %>", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "<%= @config['global']['chef-server']['ingress']['sshPort'] %>", "ToPort" : "<%= @config['global']['chef-server']['ingress']['sshPort'] %>", "CidrIp" : "<%= @config['global']['bastion']['privateIp'] %>/32"}
        ],
        "SecurityGroupEgress" : [
          {"IpProtocol" : "tcp", "FromPort" : "<%= @config['global']['chef-server']['egress']['httpPort'] %>", "ToPort" : "<%= @config['global']['chef-server']['egress']['httpPort'] %>", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "<%= @config['global']['chef-server']['egress']['httpsPort'] %>", "ToPort" : "<%= @config['global']['chef-server']['egress']['httpsPort'] %>", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "publicRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": "<%= @config['global']['publicHostedZoneId'] %>",
        "Name": "<%= "#{@config['global']['chef-server']['subDomain']}.#{@config['global']['hostedZoneName']}" %>",
        "ResourceRecords": [
          { "Fn::GetAtt": [ "instance", "PublicIp" ] }
        ],
        "TTL": "900",
        "Type": "A"
      }
    },

    "privateRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": "<%= @config['vpc']['formatronOutputs']['privateHostedZone'] %>",
        "Name": "<%= "#{@config['global']['chef-server']['subDomain']}.#{@config['global']['hostedZoneName']}" %>",
        "ResourceRecords": [
          { "Fn::GetAtt": [ "instance", "PrivateIp" ] }
        ],
        "TTL": "900",
        "Type": "A"
      }
    }
  },

  "Outputs" : {
  }
}
